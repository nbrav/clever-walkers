Project title: Scalable brain-like cognitive architecture for virtual agents

Modelling computational and Biological Reinforcement Learning in virtual agents and performing navigation and collision-avoidance

----------------------------------------------------------------------------

Requirements:

1. Unity (works on version 2017.2.0f3 Personal)
2. Python (for plotting; works on version 2.7.6)

----------------------------------------------------------------------------

Running Unity: 'unity_project/' directory includes scripts need for Unity.

1. When inside Unity, run a Object with PopulateScene.cs script. It will generate (multiple) agents, running on QAgent.cs and ZombieAgent.cs scripts, and create a UDP server to listen for the brain.

----------------------------------------------------------------------------

Running the brain on Personal Computer: rl-brain directory includes scripts to run the brain network.

1. Compile the EmptyBrain.cpp file like:

> mpic++ -std=c++11 -o EmptyBrain EmptyBrain.cpp

2. Execute (after playing Unity) with 10 being <num_agents> same as number of (intelligent) agents in Unity.

> mpirun -np 10 ./EmptyBrain

----------------------------------------------------------------------------

Running the brain on PDC: rl-brain has all the scripts

1. Login to Beskow PDC, using kinit and ssh, as usual.

2. Copy files to the directory in your klemming file system: 

> cd /cfs/klemming/nobackup/<u>/<username> 

where <username> is your PDC username and <u> is its first letter

3. Change the macro-defintion in EmptyBrain.cpp to the IP where Unity is running. 

4. Switch to GNU compiler and compile with c++11 like:

> module swap PrgEnv-cray PrgEnv-gnu
> CC -std=c++11 -o EmptyBrain EmptyBrain.cpp

5. Get a node for ~1 hour:

> salloc --nodes=1 -t 1:00:00 -A <alloc_name>

where <alloc_name> is your allocation name. You can find it by projinfo command.

6. Run the executable with 10 being <num_agents> same as number of (intelligent) agents in Unity.

> aprun -n 10 ./EmptyBrain
